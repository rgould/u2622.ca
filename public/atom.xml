<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[☢ u2622.ca]]></title>
  <link href="http://u2622.ca/atom.xml" rel="self"/>
  <link href="http://u2622.ca/"/>
  <updated>2017-11-27T09:42:58+01:00</updated>
  <id>http://u2622.ca/</id>
  <author>
    <name><![CDATA[u2622]]></name>
    <email><![CDATA[u2622@u2622.ca]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Principles for Software Development]]></title>
    <link href="http://u2622.ca/blog/2017/11/26/my-principles-for-software-development/"/>
    <updated>2017-11-26T18:37:38+01:00</updated>
    <id>http://u2622.ca/blog/2017/11/26/my-principles-for-software-development</id>
    <content type="html"><![CDATA[<p>Here are some of the principles by which I try to develop software. This isn&rsquo;t
a hard-and-fast list, but rather a set of guidelines that I use. I don&rsquo;t follow
all of them every day, but I try to follow them as much as I can. This list is
under constant review, extending and changing as I grow as a developer.</p>

<ul>
<li><p><strong>Don&rsquo;t leave work unfinished</strong> - Work that is started but not finished is a
  liability. At best, it means a feature isn&rsquo;t in production sooner than it
  could be (representing wasted opportunity). At worst, the feature will
  suffer from <a href="https://en.wikipedia.org/wiki/Software_rot">software rot</a>, and may require substantial rewriting if left
  long enough.</p></li>
<li><p><strong>Work on only one thing at a time</strong> - Mental context switching is expensive.
  Focus as much as possible until that item is done.</p></li>
<li><p><strong>Teamwork</strong> - The team as a whole is more important than the individual.
  This means that you should write maintainable code, ask for help when you
  get stuck, and help out your colleagues when they need it.</p></li>
<li><p><strong>Review pull requests</strong> thoroughly and in a timely manner - as part of teamwork and
  leaving work unfinished, review your colleagues&#8217; work quickly. If they write
  a PR and it sits for a week, that is means it takes one week longer for that
  feature to make it into production.</p></li>
<li><p><strong>Fix bugs first</strong> - Bugs should be fixed before anything else. They are easier
  to fix when fresh, and existing bugs represent potential bad experience for
  enduser. See the <a href="https://blog.codinghorror.com/the-broken-window-theory/">Pragmatic Programmers&#8217; broken window theory</a>.</p></li>
<li><p><strong>Be aware of errors</strong> - Whenever an error or problem occurs, we must be
  notified of it. Otherwise, only users will experience it, and not all users
  report errors. Also if a bug is fixed before a user first notices, the bug
  doesn&rsquo;t exist from their perspective. An app slowing down to unusable
  speeds is considered a bug.</p></li>
<li><p><strong>Don&rsquo;t live with pain</strong> - When something is frustrating, take the time to
  fix the problem for everyone. Automate common tasks. This makes life easier,
  and makes the software easier to work with. It&rsquo;s not always possible given
  time contraints, but it&rsquo;s worth it. This is how big things such as Rails or
  Meteor get built.</p></li>
<li><p><strong>Produce high quality code</strong> - Take the time to do things correctly. Quality
  is worth it.</p></li>
<li><p><strong>Be pragmatic (but balance ideals)</strong> - Striving for ideals is fantastic, but
  shipping usable code is the most important.</p></li>
<li><p><strong>Don&rsquo;t let email/requests go unanswered</strong> - Others have taken the time to
  ask something of you. Be courteous, and don&rsquo;t make them wait.</p></li>
<li><p><strong>Provide test coverage</strong> - Do this where possible. The value it provides is
  tremendous. Try to consider a feature to be complete when it has test
  coverage.</p></li>
<li><p><strong>Keep learning</strong> - Always be trying to learn new things. This includes new
  ways to use existing tools, or new tools altogether. Tools range from
  programming languages, frameworks, paradigms, editors, to soft skills such
  as empathy and listening skills.</p></li>
<li><p><strong>Blame problems not people</strong> - Don&rsquo;t forget that code is written by humans,
  with real feelings. Focus on the problem itself; blaming the author is
  counterproductive.</p></li>
<li><p><strong>Encourage, don&rsquo;t discourage</strong> - Help others improve their code. Don&rsquo;t put
  them down because they wrote code that you (subjectively) could be better.
  Yours could also always be better.</p></li>
<li><p><strong>Be humble</strong> - Realise that you can learn from everyone out there, including
  those are just learning to write code, and even from those who don&rsquo;t write
  code at all.</p></li>
</ul>


<p>A good chunk of these have been taken from <a href="https://github.com/okgrow/guides/blob/master/processes/development/README.md">OK GROW!&rsquo;s development process</a>
guide, which I&rsquo;ve contributed to a bit.</p>

<p>A lot of these may seem like common sense, and I hope that they do. That&rsquo;s a
sign that you&rsquo;ve got solid guidelines in place. But I&rsquo;ve had some encounters
with people who haven&rsquo;t given such things any consideration, just like there
are companies out there that still don&rsquo;t use source code control.</p>

<p>What sort of guidelines do you use in your development process? Email me at
<a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#114;&#x67;&#111;&#x75;&#x6c;&#x64;&#64;&#x75;&#50;&#x36;&#x32;&#x32;&#46;&#99;&#x61;">&#x72;&#103;&#x6f;&#x75;&#x6c;&#x64;&#64;&#117;&#50;&#54;&#x32;&#50;&#x2e;&#x63;&#97;</a> or leave a comment below. I&rsquo;d love to hear them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Steps to Understanding Meteor Better by Improving Your JavaScript]]></title>
    <link href="http://u2622.ca/blog/2014/09/20/5_steps_to_understanding_meteor_better_by_improving_your_javascript/"/>
    <updated>2014-09-20T22:31:10+02:00</updated>
    <id>http://u2622.ca/blog/2014/09/20/5_steps_to_understanding_meteor_better_by_improving_your_javascript</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t believe you need to be a JavaScript expert before diving into Meteor, but I highly recommend taking the time to learn advanced topics first. By levelling up your JavaScript, you will understand the concepts faster, and will feel less frustrated and confused. Even if you don&rsquo;t stick with Meteor or do Meteor full time, the skills these books will teach you will help you in all aspects of development.</p>

<p>I recommend starting by watching a series of Douglas Crockford&rsquo;s lectures on JavaScript, and then following it with Reginald Braithwaite&rsquo;s Javascript Allongé.</p>

<ol>
<li>Watch Crockford&rsquo;s <em><a href="https://www.youtube.com/watch?v=v2ifWcnQs6M">The JavaScript Programming Language</a></em>. Watch it even if you already have built some applications with JS already. It goes into the fundamentals in-depth, and will help cement the basics in your mind, which is essential when learning advanced topics.</li>
<li>Watch Crockford&rsquo;s <em><a href="https://www.youtube.com/watch?v=Y2Y0U-2qJMs">Theory of the DOM</a></em>. Watch it even if you think you know the DOM well. Again, establishing fundamentals makes learning advanced topics easier.</li>
<li>Watch Crockford&rsquo;s <em><a href="https://www.youtube.com/watch?v=DwYPG6vreJg">Advanced JavaScript</a></em>. It covers some advanced topics sometimes unique to JavaScript, and common advanced patterns. If you&rsquo;ve ever tried reading a JavaScript library and couldn&rsquo;t even begin to comphrehend it, this lecture will help clear things up.</li>
<li>Watch Crockford&rsquo;s <em><a href="https://www.youtube.com/watch?v=hQVTIJBZook">JavaScript: The Good Parts</a></em>. It will help you pick out the best parts of the language to use, and the parts that you need to actively avoid.</li>
<li>Read Reginald Braithwaite&rsquo;s <em><a href="https://leanpub.com/javascript-allonge">JavaScript Allongé</a></em>. Reginald (aka ragnwald) covers advanced functional topics, and this will permanently change how you write your JavaScript, enabling you to write resuable code faster and with much higher confidence.</li>
</ol>


<p>I recommend doing the above in that order. <em>Allongé</em> is more advanced and builds off of topics covered by Crockford. Each step will help bring your JavaScript game to the next level, with Crockford&rsquo;s lessons establishing solid fundamentals, and <em>Allongé</em> teaching (in a very effective manner) the more advanced usages of functional programming with JS.</p>

<p>Note that I did all of the above (and worked through the exercises in <em>Allongé</em>) before I even touched Meteor, and for the most part, the only Meteor help I&rsquo;ve needed has been the official Meteor docs. Having such a solid foundation of knowledge let me pick up Meteor with lightning speed, and all of those skills will stay with me when it comes time to learn another framework.</p>

<p>If you have trouble following Crockford&rsquo;s lectures, then I recommend reading his print edition of JavaScript: The Good Parts instead. While you&rsquo;re reading it, really work through the examples to make sure you&rsquo;re understanding it as you go along.</p>

<p>Have you ever felt that your JavaScript skills were inadequate? Have you ever looked inside one of the libraries you use (jQuery perhaps?) and felt as though you didn&rsquo;t understand JavaScript at all? I want to hear about it. <a href="mailto:rgould@u2622.ca">Email me</a> with your story (write as much or as little as you&rsquo;d like).</p>

<!-- Begin MailChimp Signup Form -->


<p><link href="//cdn-images.mailchimp.com/embedcode/slim-081711.css" rel="stylesheet" type="text/css"></p>



<div id="mc_embed_signup">
<form action="//wordpress.us8.list-manage.com/subscribe/post?u=ff25df46443f09aa393c2ae1d&amp;id=46f2ebecac" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
  <label for="mce-EMAIL">Don&#8217;t miss out on my next post!</label>
  <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;"><input type="text" name="b_ff25df46443f09aa393c2ae1d_46f2ebecac" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>




<!--End mc_embed_signup-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disadvantages of Using Meteor (Over Rails)]]></title>
    <link href="http://u2622.ca/blog/2014/08/25/disadvantages-of-using-meteor-over-rails/"/>
    <updated>2014-08-25T05:22:26+02:00</updated>
    <id>http://u2622.ca/blog/2014/08/25/disadvantages-of-using-meteor-over-rails</id>
    <content type="html"><![CDATA[<p>You can save significant amounts of time by developing some web applications by using Meteor instead of Ruby on Rails, but it doesn&rsquo;t come without drawbacks. Here are some of the ones that I&rsquo;ve encountered:
What are the disadvantages of using Meteor compared to Ruby on Rails?</p>

<p><strong>Immature Environment</strong>: The biggest problem right now is that Meteor is new. Pretty much brand new, in the scope of web development. It&rsquo;s not even version 1.0 yet, though it&rsquo;s getting close. This means that it doesn&rsquo;t have as many users, as many tutorials, as many books, as many screencasts. It can be hard if you run into a problem that no one else has run into yet, so you&rsquo;ll need to be willing to dig into it a bit yourself. I&rsquo;ve been there, and fortunately Meteor&rsquo;s codebase is fairly cleanly written (especially compared to Rails and AngularJS, two other frameworks whose code I&rsquo;ve read).</p>

<p><strong>Not Widely Supported</strong>: Another consequence of being so new is that there aren&rsquo;t as many hosting services available for Meteor apps yet. It is possible to deploy Meteor on Heroku, and in my experience it works well, though it feels very raw.</p>

<p><strong>Nothing but JavaScript</strong>: You must run JavaScript (or Coffeescript) on the server side. This isn&rsquo;t a big deal for me, but JS is definitely far from the first language I would choose to work with. The upside is that you can run the same code on the server and the browser, without worrying about having to cross-compile from another language.</p>

<p><strong>Only MongoDB</strong>: As of now, the only supported database is MongoDB. They have plans to expand this in the future.</p>

<p><strong>Rapidly Changing</strong>: The Meteor API is rapidly changing, so each new minor version may bring breaking changes. This is expected to lessen as it reaches 1.0.</p>

<p><strong>Testing Frameworks</strong>: Testing frameworks haven&rsquo;t been a high priority since the beginning, and the ones available so far have tended to be cumbersome and brittle. The community is working on solutions, but nothing stable has yet emerged, and the testing culture is nothing like the Ruby on Rails community&rsquo;s.</p>

<p>While there are many disadvantages, I feel like the advantages heavily outweigh them (usually). But the list of advantages is for another post entirely!</p>

<p>What are some other disadvantages you can think of? Email me or leave a comment!</p>

<!-- Begin MailChimp Signup Form -->


<p><link href="//cdn-images.mailchimp.com/embedcode/slim-081711.css" rel="stylesheet" type="text/css"></p>



<div id="mc_embed_signup">
<form action="//wordpress.us8.list-manage.com/subscribe/post?u=ff25df46443f09aa393c2ae1d&amp;id=46f2ebecac" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
  <label for="mce-EMAIL">Don&#8217;t miss out on my next post!</label>
  <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;"><input type="text" name="b_ff25df46443f09aa393c2ae1d_46f2ebecac" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>




<!--End mc_embed_signup-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Web Hooks With Meteor]]></title>
    <link href="http://u2622.ca/blog/2014/08/17/implementing-web-hooks-with-meteor/"/>
    <updated>2014-08-17T19:21:00+02:00</updated>
    <id>http://u2622.ca/blog/2014/08/17/implementing-web-hooks-with-meteor</id>
    <content type="html"><![CDATA[<p>It&rsquo;s possible to add web hooks to your Meteor application by using iron-router.</p>

<p>Declare a server-side route in your Routes.map declaration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span> <span class="c1">// Your other routes go here</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;hook&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/hook&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">where</span><span class="o">:</span> <span class="s1">&#39;server&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">action</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Watch the Meteor log to see this output</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hook called.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Headers: &quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Data: &quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;You wrote: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// `this.response.end` *must* be called, or else the connection is left open.</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Success!\n&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test it out, issue this curl command from the command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{&quot;message&quot;:&quot;foo&quot;}&#39;</span> http://localhost:3000/hook
</span></code></pre></td></tr></table></div></figure>


<p>The documentation for <code>this.response</code> and <code>this.request</code> are available on the node.js website: <a href="http://nodejs.org/api/http.html">http://nodejs.org/api/http.html</a></p>

<p>I&rsquo;ve created a sample Meteor application demonstrating this, which you can view at <a href="https://github.com/rgould/meteor-posthooks">https://github.com/rgould/meteor-posthooks</a></p>

<p>Not clear enough? Send me an email at <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#114;&#103;&#x6f;&#x75;&#108;&#100;&#x40;&#117;&#x32;&#54;&#x32;&#50;&#46;&#x63;&#x61;">&#x72;&#x67;&#x6f;&#x75;&#x6c;&#x64;&#64;&#117;&#50;&#54;&#50;&#x32;&#46;&#99;&#x61;</a> for some more help!</p>

<!-- Begin MailChimp Signup Form -->


<p><link href="//cdn-images.mailchimp.com/embedcode/slim-081711.css" rel="stylesheet" type="text/css"></p>



<div id="mc_embed_signup">
<form action="//wordpress.us8.list-manage.com/subscribe/post?u=ff25df46443f09aa393c2ae1d&amp;id=46f2ebecac" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
  <label for="mce-EMAIL">Don&#8217;t miss out on my next post!</label>
  <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;"><input type="text" name="b_ff25df46443f09aa393c2ae1d_46f2ebecac" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>




<!--End mc_embed_signup-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Icelandic Language Music Roundup]]></title>
    <link href="http://u2622.ca/blog/2013/04/20/icelandic-language-music-roundup/"/>
    <updated>2013-04-20T15:10:00+02:00</updated>
    <id>http://u2622.ca/blog/2013/04/20/icelandic-language-music-roundup</id>
    <content type="html"><![CDATA[<p>While focusing heavily on learning Icelandic, I dug deeply looking for Icelandic-language music. There are surprisingly high amounts of Icelandic bands that sing exclusively in English. Here are my favourite songs with Icelandic lyrics:</p>

<p><strong>Mammút</strong> - They play energetic rock music, bordering on post-punk sometimes. The first Icelandic language band I liked, and my favourite still.
 Here&rsquo;s Svefnsýkt: <iframe width="420" height="315" src="http://www.youtube.com/embed/aeGZriDklEo" frameborder="0" allowfullscreen></iframe>
 Bónus: <a href="https://www.youtube.com/watch?v=8EV-pE4xaHI">Rauðilækur</a></p>

<p><strong>Q4U</strong> - Postpunk from the 80s, mostly in Icelandic. They&rsquo;re still around.
 Here&rsquo;s Sigurinn: <iframe width="420" height="315" src="http://www.youtube.com/embed/iiWcZKhWlQA" frameborder="0" allowfullscreen></iframe>
 Bónus: <a href="https://www.youtube.com/watch?v=6qM2yrG1wpY">Snjóhvít</a></p>

<p><strong>Samaris</strong> - Atmospheric minimal electro/triphop with clarinet. Very haunting.
 Here&rsquo;s Góða Tungl: <iframe width="560" height="315" src="http://www.youtube.com/embed/_pKuzdMFE8k" frameborder="0" allowfullscreen></iframe>
 Bónus: <a href="http://www.youtube.com/watch?v=J9hKHJkGMwE">Stofnar Falla</a></p>

<p><strong>Nóra</strong>: Indie rock, ranging from upbeat and energetic to atmospheric and introspective. The more I listen, the more I like it. They sing entirely in Icelandic.
 Here&rsquo;s Himinbrim: <iframe width="420" height="315" src="http://www.youtube.com/embed/w66kIAWBFs8" frameborder="0" allowfullscreen></iframe>
 Bónus: <a href="https://www.youtube.com/watch?v=it2MTpGisJQ">Sjónskekkja</a></p>

<p><strong>Lockerbie</strong> - Post-rock, but with a bit more pop/rock than usually characterised by Icelandic post-rock.
 Here&rsquo;s Snjóljón: <iframe width="420" height="315" src="http://www.youtube.com/embed/cUWzNsPHcEQ" frameborder="0" allowfullscreen></iframe></p>

<p><strong>Úlfur Úlfur</strong> - Hiphop with awesome backing percussion. They sing entirely in Icelandic.
 Here&rsquo;s Út: <iframe width="560" height="315" src="http://www.youtube.com/embed/jCgbt73gD74" frameborder="0" allowfullscreen></iframe>
 Bónus: <a href="http://www.youtube.com/watch?v=R0LWMJatU4s">Ég er farinn</a></p>

<p><strong>Pascal Pinon</strong> - D.I.Y., lo-fi, indie pop electronic. Many songs in Icelandic.
 Here&rsquo;s Ekki Vanmeta: <iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F71960187"></iframe>
 Bónus: <a href="https://soundcloud.com/iceland-music-export/pascal-pinon-sandur">Sandur</a></p>

<p><strong>Sólstafir</strong> - Post-black metal, with elements of country and rock. They are amazing live. Their album Svartir Sandar is entirely in Icelandic and highly recommended.
 Here&rsquo;s Fjara: <iframe width="420" height="315" src="http://www.youtube.com/embed/A6j7mUxGz20" frameborder="0" allowfullscreen></iframe>
 Bónus: <a href="http://www.youtube.com/watch?v=SkA6JX8iuHo">Svartir Sandar</a></p>

<p>There&rsquo;s lots of music that I&rsquo;ve discovered that I didn&rsquo;t cover here, but I only wanted to showcase the music I liked the most. Feel free to leave other suggestions in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencast: Using Shell History to Create Aliases]]></title>
    <link href="http://u2622.ca/blog/2012/03/04/shell-aliases/"/>
    <updated>2012-03-04T19:15:00+01:00</updated>
    <id>http://u2622.ca/blog/2012/03/04/shell-aliases</id>
    <content type="html"><![CDATA[<p>Contents:</p>

<ol>
<li>Introduction to aliases @ 0:00</li>
<li>Analysing shell history to create relevant aliases @ 4:43</li>
</ol>


<p>Download: <a href="http://rgould.ca/downloads/aliases.mov">mov</a> 24MB, 8:26 (Recommended)</p>

<p>Watch (recommended in full screen and in HD):</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/e4bQ4FstNvs" frameborder="0" allowfullscreen></iframe>


<p>Notes:</p>

<p>Make an alias:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">l</span><span class="o">=</span><span class="s2">&quot;ls -al&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">glog</span><span class="o">=</span><span class="s2">&quot;git log&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add those to your <code>~/.aliasrc</code>.</p>

<p>Modify <code>~/.zshrc</code> or <code>~/.bashrc</code> (works for both):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[[</span> -r ~/.aliasrc <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">source</span> ~/.aliasrc
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>View shell history: <code>history</code></p>

<p>View count of common commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">history</span> | awk <span class="s1">&#39;{ print $2 }&#39;</span> | sort | uniq -c | sort -n
</span><span class='line'><span class="nb">history</span> | awk <span class="s1">&#39;{ print $2,$3 }&#39;</span> | sort | uniq -c | sort -n
</span></code></pre></td></tr></table></div></figure>


<p>Use that output to create better aliases!</p>

<p>Here&rsquo;s some of my favourite aliases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias</span> ..<span class="o">=</span><span class="s1">&#39;cd ..&#39;</span>
</span><span class='line'><span class="nb">alias</span> ...<span class="o">=</span><span class="s1">&#39;cd ../..&#39;</span>
</span><span class='line'><span class="nb">alias</span> ....<span class="o">=</span><span class="s1">&#39;cd ../../../&#39;</span>
</span><span class='line'><span class="nb">alias</span> .....<span class="o">=</span><span class="s1">&#39;cd ../../../../&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">be</span><span class="o">=</span><span class="s1">&#39;bundle exec&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">g</span><span class="o">=</span>git
</span><span class='line'><span class="nb">alias </span><span class="nv">ga</span><span class="o">=</span><span class="s1">&#39;git add&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gc</span><span class="o">=</span><span class="s1">&#39;git commit -v&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gca</span><span class="o">=</span><span class="s1">&#39;git commit -v -a&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gch</span><span class="o">=</span><span class="s1">&#39;git checkout&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gl</span><span class="o">=</span><span class="s1">&#39;git pull&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gst</span><span class="o">=</span><span class="s1">&#39;git status&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">l</span><span class="o">=</span><span class="s1">&#39;ls -al&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machinist and Association Validations]]></title>
    <link href="http://u2622.ca/blog/2012/02/11/machinist-and-association-validations/"/>
    <updated>2012-02-11T11:32:00+01:00</updated>
    <id>http://u2622.ca/blog/2012/02/11/machinist-and-association-validations</id>
    <content type="html"><![CDATA[<p>While upgrading to Machinist 2, I had a hell of a time getting blueprints with associations to actually save.</p>

<p>The problem turned out to be that the code was using <code>validates_presence_of :hometown_id</code>, where <code>hometown</code> is the name of the association, and the solution is to use <code>validates_presence_of :hometown</code>, or the newer version: <code>validates :hometown, presence: true</code>.</p>

<p>If you have a given class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Viking</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:hometown</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:hometown_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and blueprints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Viking</span><span class="o">.</span><span class="n">blueprint</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="p">{</span> <span class="s2">&quot;Heiðrek&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">hometown</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then calling <code>Viking.make</code> will properly return an unsaved Viking object (with a Hometown object <code>viking.hometown</code>), but <code>valid?</code> will return false.</p>

<p>Calling <code>Viking.make!</code> will throw an exception: <code>ActiveRecord::RecordInvalid: Validation failed: Hometown can't be blank</code></p>

<p>If you really want to keep using <code>validates_presence_of :hometown_id</code>, you can modify the blueprint like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Viking</span><span class="o">.</span><span class="n">blueprint</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="p">{</span> <span class="s2">&quot;Heiðrek&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">hometown</span> <span class="p">{</span> <span class="no">Hometown</span><span class="o">.</span><span class="n">make!</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then Viking.make! will succeed. Viking.make will also work, and will return an unsaved Viking object, but it will actually create and save the associated Hometown object, which negates part of the point of calling <code>.make</code> instead of <code>.make!</code> (<code>make</code> creates objects but does not save them to the database, giving quite a performance boost for test suites).</p>

<p>The proper solution is to adjust the validation in your model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Viking</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:hometown</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:hometown</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates_associated</span> <span class="ss">:hometown</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key is that we&rsquo;ve changed <code>validates_presence_of :hometown_id</code> to <code>validates :hometown, presence: true</code>. The validation actually checks the association itself, not the presence of an id field (which is only ever set once the hometown is saved).</p>

<p>We&rsquo;ve also added a <code>validates_associated :hometown</code> call, which will check <code>hometown.valid?</code> before saving, and if the hometown fails validation, then the viking object will as well.</p>

<p>See API docs about validations here:</p>

<ul>
<li><a href="http://api.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html#method-i-validates">validates</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated">validates_associated</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goðan Daginn!]]></title>
    <link href="http://u2622.ca/blog/2011/11/02/godan-daginn/"/>
    <updated>2011-11-02T23:58:00+01:00</updated>
    <id>http://u2622.ca/blog/2011/11/02/godan-daginn</id>
    <content type="html"><![CDATA[<p>Goðan Daginn, Heimur!</p>

<p>I just set up this new octopress instance in roughly half an hour! Hooray!</p>
]]></content>
  </entry>
  
</feed>
